pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
function make_memspr(sx,sy,w,h,tc)
	-- transparent color
	tc=tc or 0
 local s,smask,i={},{},0
 for y=sy,sy+h-1 do
  local mask=0x1000
  local b,bmask
  for x=sx,sx+w-1 do
   local c=sget(x,y)
   b=bor(b or 0,c*mask)
   bmask=bor(bmask or 0,(c==tc and 0xf or 0)*mask)
   -- shift to next row
  	mask=lshr(mask,4)
   if mask==0 then
    mask=0x1000
    s[i],smask[i],b,bmask=b,bmask
    i+=1
   end
  end
  if b then
   s[i],smask[i]=b,bmask
   i+=1
  end
  -- dword padding
  s[i],smask[i]=0,0xffff.ffff
  i+=1
 end

 -- width in dword unit+padding
 w=flr(w/8)+1
 
 return {
  debug=function(self,x,y)
   for k,v in pairs(s) do
    local sx,sy=x+8*(k%w),flr(k/w)
    pset(sx,y+sy,lshr(v,12))
    pset(sx+1,y+sy,lshr(v,8))
    pset(sx+2,y+sy,lshr(v,4))
    pset(sx+3,y+sy,v)
    pset(sx+4,y+sy,shl(v,4))
    pset(sx+5,y+sy,shl(v,8))
    pset(sx+6,y+sy,shl(v,12))
    pset(sx+7,y+sy,shl(v,16))
   end
  end,
  draw=function(self,x,y)
   -- dword boundary
   local ix=8*flr(x/8)
  	local shift=shl(x-ix,2)
  	local bmask=lshr(0xffff.ffff,shift)  
   for j=0,h-1 do
    local v0mask,v0=0xffff.ffff
    local py=y+8*j
	   for i=0,w-1 do
	   	local v1,v1mask=rotr(s[w*j+i],shift),rotr(smask[w*j+i],shift)
				 -- back color
			  local c=0x7777.7777
					-- mix with previous sprite image
					local vmask=bor(
					 band(v1mask,bmask),
						band(v0mask,bnot(bmask)))
					local v=bor(
					 band(v1,bmask),
						band(v0,bnot(bmask)))
  	  -- merge with back color
  	  v=bor(
  	  	band(c,vmask),
  	  	band(v,bnot(vmask)))
  	 
  	 	--[[
  	  local sx,sy=ix+i*8,y+j
	    pset(sx,sy,lshr(v,12))
	    pset(sx+1,sy,lshr(v,8))
	    pset(sx+2,sy,lshr(v,4))
	    pset(sx+3,sy,v)
	    pset(sx+4,sy,shl(v,4))
	    pset(sx+5,sy,shl(v,8))
	    pset(sx+6,sy,shl(v,12))
	    pset(sx+7,sy,shl(v,16))
					]]
	   	--print(tostr(bor(band(v1,bmask),band(v0,bnot(bmask))),true).."["..tostr(bnot(bmask),true).."]",x+i*100,py,7)
	   	v0,v0mask=v1,v1mask
				end
			end   
  end
 }
end

local s=make_memspr(8,0,16,16)

local x,y=64,64
function _update()
 if(btn(0)) x-=1
 if(btn(1)) x+=1
 if(btn(2)) y-=1
 if(btn(3)) y+=1
 
end

function _draw()
 cls(1)
 --s:debug(64,64)
 
 if btn(4) then
  spr(1,x,y,2,2)
 else
  s:draw(x,y)
 end
 
 print(stat(1),2,2,8)
end

__gfx__
0000000088888888dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000088888888dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070088008008dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700088008008dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700088888888dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070088888888dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000088888888dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000088888888dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555552222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
